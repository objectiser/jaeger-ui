Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.getMountedInstances = getMountedInstances;
exports.clearMountedInstances = clearMountedInstances;
exports.default = useMetrics;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _ExecutionEnvironment = require("fbjs/lib/ExecutionEnvironment");

var _hoistNonReactStatics = require("hoist-non-react-statics");

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _PropTypes = require("./PropTypes");

var _PropTypes2 = _interopRequireDefault(_PropTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mountedInstances = [];

function getMountedInstances() {
    return mountedInstances;
}

// convenient method for unit test
function clearMountedInstances() {
    mountedInstances.length = 0;
}

function getDisplayName(Comp) {
    return Comp.displayName || Comp.name || "Component";
}

function wrap(ComposedComponent) {
    var _class, _temp;

    var Metrics = (_temp = _class = function (_Component) {
        _inherits(Metrics, _Component);

        function Metrics() {
            _classCallCheck(this, Metrics);

            return _possibleConstructorReturn(this, (Metrics.__proto__ || Object.getPrototypeOf(Metrics)).apply(this, arguments));
        }

        _createClass(Metrics, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                if (!_ExecutionEnvironment.canUseDOM) {
                    return;
                }

                mountedInstances.push(Metrics);
            }

            // context unit test fails w/o this, why??

        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var index = mountedInstances.indexOf(this);
                mountedInstances.splice(index, 1);
            }
        }, {
            key: "render",
            value: function render() {
                return _react2.default.createElement(ComposedComponent, _extends({}, this.props, this.context));
            }
        }]);

        return Metrics;
    }(_react.Component), _class.displayName = "Metrics(" + getDisplayName(ComposedComponent) + ")", _class.contextTypes = {
        metrics: _PropTypes2.default.metrics
    }, _temp);

    return (0, _hoistNonReactStatics2.default)(Metrics, ComposedComponent);
}

function useMetrics() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (typeof args[0] === "function") {
        return wrap.apply(undefined, args);
    }

    return function (target) {
        return wrap.apply(undefined, [target].concat(args));
    };
}